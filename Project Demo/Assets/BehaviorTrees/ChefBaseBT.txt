BehaviorTree tree = new BehaviorTreeBuilder("")
.RepeatUntilFail("Loop")
.Sequence("Sequence")
.Do("AssessPriority", () => { return Status.ERROR; })
.Selector("Selector")
.Sequence("ReceiveCustomer")
.If("ShouldReceiveCustomer",() => { return false; })
.Do("GoToQueue", () => { return Status.ERROR; })
.Do("BringCustomerToTable", () => { return Status.ERROR; })
.Do("GiveMenuToCustomer", () => { return Status.ERROR; })
.End()
.Sequence("AttendCustomer")
.If("ShouldAttendCustomer",() => { return false; })
.Do("GoToTable", () => { return Status.ERROR; })
.Do("GetOrderFromCustomer", () => { return Status.ERROR; })
.Do("GetMenuFromCustomer", () => { return Status.ERROR; })
.Do("GoToKitchen", () => { return Status.ERROR; })
.Do("GiveOrderToKitchen", () => { return Status.ERROR; })
.End()
.Sequence("ServeFood")
.If("ShouldServeFood",() => { return false; })
.Do("GoToKitchen", () => { return Status.ERROR; })
.Do("PickupFood", () => { return Status.ERROR; })
.Do("GoToTable", () => { return Status.ERROR; })
.Do("GiveFoodToCustomer", () => { return Status.ERROR; })
.End()
.Sequence("BringBill")
.If("ShouldBringBill",() => { return false; })
.Do("GoToKitchen", () => { return Status.ERROR; })
.Do("PickupBill", () => { return Status.ERROR; })
.Do("GoToTable", () => { return Status.ERROR; })
.Do("GiveBillToCustomer", () => { return Status.ERROR; })
.Do("GetMoneyFromCustomer", () => { return Status.ERROR; })
.Do("CleanTable", () => { return Status.ERROR; })
.End()
.End()
.End()
.End();
