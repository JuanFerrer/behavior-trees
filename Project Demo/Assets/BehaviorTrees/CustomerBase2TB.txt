BehaviorTree tree = new BehaviorTreeBuilder("")
.Sequence("Sequence")
.Selector("QueueSelector")
.If("NeedsToStartQueue",() => { return false; })
.Selector("NeedsToGoToQueueSelector")
.If("IsInQueue",() => { return false; })
.Sequence("StartQueueSequence")
.Do("GoToQueue", () => { return Status.ERROR; })
.Do("StartQueue", () => { return Status.ERROR; })
.End()
.Selector("BeReceivedSelector")
.If("NeedsToBeReceived",() => { return false; })
.Do("BeReceived", () => { return Status.ERROR; })
.End()
.Selector("BeAttendedSelector")
.If("NeedsToBeAttended",() => { return false; })
.Do("BeAttended", () => { return Status.ERROR; })
.End()
.Selector("BeServedSelector")
.If("NeedsToBeServed",() => { return false; })
.Do("BeServed", () => { return Status.ERROR; })
.End()
.Selector("EatSelector")
.If("NeedsToEat",() => { return false; })
.Do("Eat", () => { return Status.ERROR; })
.End()
.Selector("ReceiveBillSeletor")
.If("NeedsToReceiveBill",() => { return false; })
.Do("ReceiveBill", () => { return Status.ERROR; })
.End()
.Do("Leave", () => { return Status.ERROR; })
.End()
.End()
.End()
.End();
